const FiatToken = artifacts.require("./FiatToken.sol");
const USDF = artifacts.require("./USDf.sol");
const assert = require("chai").assert;
const truffleAssert = require('truffle-assertions');

const common = require("./common.js");
const TEST_TAG = 'Recover/Reset-Funds - ';


contract(common.TEST_CONTRACT_NAME, async accounts => {
	var tokenInstance;
	let contractOwner = accounts[0];
	let admin1 = accounts[1];
	//let admin2 = accounts[2];
	let user1 = accounts[3];
	let user2 = accounts[4];
	let ffc;
	
	
	
	// 'beforeEach' function will run before each test creating a new instance of the contract each time
	beforeEach('setup contract for each test', async () => {
		//let ffc = await FiatToken.deployed();
        //ffc = await FiatToken.new(common.tokenSymbolUSD, common.tokenNameUSD, common.tokenVersion, common.tokenDecimals, {from: contractOwner});
		ffc = await common.createNewUSDContract(contractOwner);
		
		// add a system admin to perform admin operations like recoverable wallets reset
		await ffc.addAdmin(admin1, {from: contractOwner});
		assert.equal(await ffc.isAdmin(admin1), true, 'admin1 should have admin role by now');
    });
	
	
	
	it(TEST_TAG + 'owner and user wallets funds are NOT recoverable upon deployment', async () => {
		// check that no wallet is recoverable upon deployment
		let isRecoverable = await ffc.isWalletRecoverable(contractOwner);
		assert.equal(isRecoverable, false, 'contract owner wallet funds are not recoverable upon deployment');
		
		isRecoverable = await ffc.isWalletRecoverable(user1);
		assert.equal(isRecoverable, false, 'user wallet funds are not recoverable upon deployment');
	});
	
	it(TEST_TAG + 'contract owner can make his own wallet funds recoverable', async () => {
		// make sure owner contract wallet address funds are NOT recoverable upon deployment
		let isRecoverable = await ffc.isWalletRecoverable(contractOwner, {from: contractOwner});
		assert.equal(isRecoverable, false, 'contract owner wallet funds are not recoverable upon deployment');
		
		// make owner contract wallet address funds recoverable without submitting changes to the blockchain
		let ok = await ffc.makeWalletRecoverable.call(true, {from: contractOwner});
		assert.equal(ok, true, 'call: contract owner should be able to make his wallet funds recoverable');
		
		// make owner contract wallet address funds recoverable and submit changes to the blockchain
		let receipt = await ffc.makeWalletRecoverable(true, {from: contractOwner});
		// check for emitted event 'WalletRecoverable(msg.sender, _recoverable)'
		assert.equal(receipt.logs.length, 1, 'makeWalletRecoverable should trigger one event only');
		assert.equal(receipt.logs[0].event, 'WalletRecoverable', 'should be the "WalletRecoverable" event');
		assert.equal(receipt.logs[0].args._user, contractOwner, 'logs the current user address');
		assert.equal(receipt.logs[0].args._resetRightsGranted, true, 'logs the wallet address funds state as recoverable or not');
		
		// owner contract checks his wallet address funds are recoverable
		isRecoverable = await ffc.isWalletRecoverable(contractOwner, {from: contractOwner});
		assert.equal(isRecoverable, true, 'contract owner wallet funds should be recoverable by now');
		
		// ***any user can check any other user wallet address if funds are recoverable or not
		isRecoverable = await ffc.isWalletRecoverable(contractOwner, {from: user1});
		assert.equal(isRecoverable, true, 'user1 checks that contract owner wallet funds are recoverable by now');
		
		// can not make owner contract wallet address funds recoverable if they already are
		try {
            await ffc.makeWalletRecoverable(true, {from: contractOwner});
			assert.fail();
        } catch (error) {
            assert(error.message.indexOf('revert') >= 0, 'makeWalletRecoverable error message must contain revert');
        }
		
		// make owner contract wallet address funds back as NOT recoverable without submitting changes to the blockchain
		ok = await ffc.makeWalletRecoverable.call(false, {from: contractOwner});
		assert.equal(ok, true, 'contract owner should be able to make his wallet funds back as NOT recoverable');
		
		// make owner contract wallet address funds back as NOT recoverable and submit changes to the blockchain
		receipt = await ffc.makeWalletRecoverable(false, {from: contractOwner});
		// check for emitted event 'WalletRecoverable(msg.sender, _recoverable)'
		assert.equal(receipt.logs.length, 1, 'makeWalletRecoverable should trigger one event only');
		assert.equal(receipt.logs[0].event, 'WalletRecoverable', 'should be the "WalletRecoverable" event');
		assert.equal(receipt.logs[0].args._user, contractOwner, 'logs the current user address');
		assert.equal(receipt.logs[0].args._resetRightsGranted, false, 'logs the wallet address funds state as recoverable or not');
		
		// owner contract checks his wallet address funds are NOT recoverable
		isRecoverable = await ffc.isWalletRecoverable(contractOwner, {from: contractOwner});
		assert.equal(isRecoverable, false, 'contract owner wallet funds should be back to NOT recoverable by now');
	});
	
	it(TEST_TAG + 'user1 can make his own wallet funds recoverable', async () => {
		// make sure user1 is a normal user, not the contract owner
		let notEq = (await ffc.owner()) != user1;
		assert.equal(notEq, true, 'user1 should be a normal user, not the contract owner for this test');
		
		// make sure user1 wallet address funds are NOT recoverable upon deployment
		let isRecoverable = await ffc.isWalletRecoverable(user1, {from: user1});
		assert.equal(isRecoverable, false, 'user1 wallet funds are not recoverable upon deployment');
		
		// make user1 wallet address funds recoverable without submitting changes to the blockchain
		let ok = await ffc.makeWalletRecoverable.call(true, {from: user1});
		assert.equal(ok, true, 'call: user1 should be able to make his wallet funds recoverable');
		
		// make user1 wallet address funds recoverable and submit changes to the blockchain
		let receipt = await ffc.makeWalletRecoverable(true, {from: user1});
		// check for emitted event 'WalletRecoverable(msg.sender, _recoverable)'
		assert.equal(receipt.logs.length, 1, 'makeWalletRecoverable should trigger one event only');
		assert.equal(receipt.logs[0].event, 'WalletRecoverable', 'should be the "WalletRecoverable" event');
		assert.equal(receipt.logs[0].args._user, user1, 'logs the current user address');
		assert.equal(receipt.logs[0].args._resetRightsGranted, true, 'logs the wallet address funds state as recoverable or not');
		
		// user1 checks his wallet address funds are recoverable
		isRecoverable = await ffc.isWalletRecoverable(user1, {from: user1});
		assert.equal(isRecoverable, true, 'user1 wallet funds should be recoverable by now');
		
		// ***any user can check any other user wallet address if funds are recoverable or not
		isRecoverable = await ffc.isWalletRecoverable(user1, {from: user2});
		assert.equal(isRecoverable, true, 'user2 checks that user1 wallet funds are recoverable by now');
		
		// can not make user1 wallet address funds recoverable if they already are
		try {
            await ffc.makeWalletRecoverable(true, {from: user1});
			assert.fail();
        } catch (error) {
            assert(error.message.indexOf('revert') >= 0, 'makeWalletRecoverable error message must contain revert');
        }
		
		// make user1 wallet address funds back as NOT recoverable without submitting changes to the blockchain
		ok = await ffc.makeWalletRecoverable.call(false, {from: user1});
		assert.equal(ok, true, 'user1 should be able to make his wallet funds back as NOT recoverable');
		
		// make user1 wallet address funds back as NOT recoverable and submit changes to the blockchain
		receipt = await ffc.makeWalletRecoverable(false, {from: user1});
		// check for emitted event 'WalletRecoverable(msg.sender, _recoverable)'
		assert.equal(receipt.logs.length, 1, 'makeWalletRecoverable should trigger one event only');
		assert.equal(receipt.logs[0].event, 'WalletRecoverable', 'should be the "WalletRecoverable" event');
		assert.equal(receipt.logs[0].args._user, user1, 'logs the current user address');
		assert.equal(receipt.logs[0].args._resetRightsGranted, false, 'logs the wallet address funds state as recoverable or not');
		
		// user1 checks his wallet address funds are NOT recoverable
		isRecoverable = await ffc.isWalletRecoverable(user1, {from: user1});
		assert.equal(isRecoverable, false, 'user1 wallet funds should be back to NOT recoverable by now');
	});
	
	it(TEST_TAG + 'making wallets recoverable triggers the "WalletRecoverable" event', async () => {
		// make owner contract wallet address funds recoverable and submit changes to the blockchain
		let receipt1 = await ffc.makeWalletRecoverable(true, {from: contractOwner});
		// check for emitted event 'WalletRecoverable(msg.sender, _recoverable)'
		assert.equal(receipt1.logs.length, 1, 'makeWalletRecoverable should trigger one event only');
		assert.equal(receipt1.logs[0].event, 'WalletRecoverable', 'should be the "WalletRecoverable" event');
		assert.equal(receipt1.logs[0].args._user, contractOwner, 'logs the current user address');
		assert.equal(receipt1.logs[0].args._resetRightsGranted, true, 'logs the wallet address funds state as recoverable or not');
		
		// make admin wallet address funds recoverable and submit changes to the blockchain
		let receipt2 = await ffc.makeWalletRecoverable(true, {from: admin1});
		// check for emitted event 'WalletRecoverable(msg.sender, _recoverable)'
		assert.equal(receipt2.logs.length, 1, 'makeWalletRecoverable should trigger one event only');
		assert.equal(receipt2.logs[0].event, 'WalletRecoverable', 'should be the "WalletRecoverable" event');
		assert.equal(receipt2.logs[0].args._user, admin1, 'logs the current user address');
		assert.equal(receipt2.logs[0].args._resetRightsGranted, true, 'logs the wallet address funds state as recoverable or not');
		
		// make user1 wallet address funds recoverable and submit changes to the blockchain
		let receipt3 = await ffc.makeWalletRecoverable(true, {from: user1});
		// check for emitted event 'WalletRecoverable(msg.sender, _recoverable)'
		assert.equal(receipt3.logs.length, 1, 'makeWalletRecoverable should trigger one event only');
		assert.equal(receipt3.logs[0].event, 'WalletRecoverable', 'should be the "WalletRecoverable" event');
		assert.equal(receipt3.logs[0].args._user, user1, 'logs the current user address');
		assert.equal(receipt3.logs[0].args._resetRightsGranted, true, 'logs the wallet address funds state as recoverable or not');
	});
	
	
	
	
	it(TEST_TAG + 'contract owner, admins and users can NOT recover/reset user wallet funds of NON recoverable funds wallet', async () => {
		// user1 checks his wallet address funds are recoverable
		let isRecoverable = await ffc.isWalletRecoverable(user1, {from: user1});
		assert.equal(isRecoverable, false, 'user1 wallet funds should NOT be recoverable');
		
		//*** contract owner can NOT recover/reset OTHER users wallets if they are NOT recoverable funds wallets
		try {
			await ffc.resetWalletBalance(user1, {from: contractOwner});
			assert.fail();
		} catch (error) {
            assert(error.message.indexOf('revert') >= 0, 'resetWalletBalance error message must contain revert');
        }
		
		//*** admin can NOT recover/reset users wallets if they are NOT recoverable funds wallets
		try {
			await ffc.resetWalletBalance(user1, {from: admin1});
			assert.fail();
		} catch (error) {
            assert(error.message.indexOf('revert') >= 0, 'resetWalletBalance error message must contain revert');
        }
		
		//*** user1 can NOT recover/reset HIS own wallet if it is NOT a recoverable funds wallet
		try {
			await ffc.resetWalletBalance(user1, {from: user1});
			assert.fail();
		} catch (error) {
            assert(error.message.indexOf('revert') >= 0, 'resetWalletBalance error message must contain revert');
        }
		
		//*** other users can NOT recover/reset OTHER users wallets if they are NOT recoverable funds wallets
		try {
			await ffc.resetWalletBalance(user1, {from: user2});
			assert.fail();
		} catch (error) {
            assert(error.message.indexOf('revert') >= 0, 'resetWalletBalance error message must contain revert');
        }
	});
	
	it(TEST_TAG + 'users can NOT recover/reset HIS and OTHER users wallet funds even if they are recoverable', async () => {
		// make user1 wallet address funds recoverable and submit changes to the blockchain
		let receipt = await ffc.makeWalletRecoverable(true, {from: user1});
		
		// user1 checks his wallet address funds are recoverable
		isRecoverable = await ffc.isWalletRecoverable(user1, {from: user1});
		assert.equal(isRecoverable, true, 'user1 wallet funds should be recoverable by now');
		
		//*** users can NOT recover/reset OTHER users wallets even if they are recoverable funds wallets
		try {
			receipt = await ffc.resetWalletBalance(user1, {from: user2});
			assert.fail();
		} catch (error) {
            assert(error.message.indexOf('revert') >= 0, 'resetWalletBalance error message must contain revert');
        }
		
		//*** users can NOT recover/reset HIS own wallet even if it is a recoverable funds wallets
		try {
			receipt = await ffc.resetWalletBalance(user1, {from: user1});
			assert.fail();
		} catch (error) {
            assert(error.message.indexOf('revert') >= 0, 'resetWalletBalance error message must contain revert');
        }
	});
	
	it(TEST_TAG + 'contract owner can recover/reset users wallet funds if they are recoverable, triggers "WalletBalanceReset" event', async () => {
		// make user1 wallet address funds recoverable and submit changes to the blockchain
		let receipt = await ffc.makeWalletRecoverable(true, {from: user1});
		
		// user1 checks his wallet address funds are recoverable
		isRecoverable = await ffc.isWalletRecoverable(user1, {from: user1});
		assert.equal(isRecoverable, true, 'user1 wallet funds should be recoverable by now');
		
		//*** contract owner can recover/reset users wallets if they are recoverable funds wallets
		receipt = await ffc.resetWalletBalance(user1, {from: contractOwner});
		// check for emitted event 'WalletBalanceReset(address indexed _admin, address indexed _resetWallet)'
		assert.equal(receipt.logs.length, 1, 'resetWalletBalance should trigger an event');
		assert.equal(receipt.logs[0].event, 'WalletBalanceReset', 'should be the "WalletBalanceReset" event');
		assert.equal(receipt.logs[0].args._admin, contractOwner, 'logs the admin address performing the operation');
		assert.equal(receipt.logs[0].args._resetWallet, user1, 'logs the wallet address that is being reset');
	});
	
	it(TEST_TAG + 'admin can recover/reset users wallet funds if they are recoverable, triggers "WalletBalanceReset" event', async () => {
		// make user1 wallet address funds recoverable and submit changes to the blockchain
		let receipt = await ffc.makeWalletRecoverable(true, {from: user1});
		
		// user1 checks his wallet address funds are recoverable
		isRecoverable = await ffc.isWalletRecoverable(user1, {from: user1});
		assert.equal(isRecoverable, true, 'user1 wallet funds should be recoverable by now');
		
		//*** admin1 can recover/reset users wallets if they are recoverable funds wallets
		receipt = await ffc.resetWalletBalance(user1, {from: admin1});
		// check for emitted event 'WalletBalanceReset(address indexed _admin, address indexed _resetWallet)'
		assert.equal(receipt.logs.length, 1, 'resetWalletBalance should trigger an event');
		assert.equal(receipt.logs[0].event, 'WalletBalanceReset', 'should be the "WalletBalanceReset" event');
		assert.equal(receipt.logs[0].args._admin, admin1, 'logs the admin address performing the operation');
		assert.equal(receipt.logs[0].args._resetWallet, user1, 'logs the wallet address that is being reset');
	});
})
