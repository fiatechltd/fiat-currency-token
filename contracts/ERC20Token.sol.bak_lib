pragma solidity ^0.4.24;

import "./libs/SafeMathLib.sol";
import "./libs/ERC20Lib.sol";
import "./libs/IERC20.sol";
import "./libs/IERC20LibEvents.sol";
//import "./access/roles/Admin.sol";
import "./Owned.sol";
import "./Mortal.sol";



/**
 * @dev ERC20 token contract encapsulating generic token functionality.
 */
contract ERC20Token is IERC20LibEvents
	, IERC20
	, Owned
	, Mortal
	//, Admin
{
	using SafeMathLib for uint;
	
	using ERC20Lib for ERC20Lib.TokenStorage;
	ERC20Lib.TokenStorage internal token;
	
	
	
	constructor (uint _initial_supply) internal {
		token.init(_initial_supply);
	}
	
	/*function init(uint _initial_supply) public onlyOwner {
		token.init(_initial_supply);
	}*/
	
	function totalSupply() public view returns (uint) {
		token.totalSupply;
	}
	
	function transfer(address _to, uint _value) public returns (bool success) {
		return token.transfer(_to, _value);
	}
	
	function transferFrom(address _from, address _to, uint _value) public returns (bool success) {
		return token.transferFrom(_from, _to, _value);
	}
	
	function balanceOf(address _owner) public view returns (uint balance) {
		return token.balanceOf(_owner);
	}
	
	function approve(address _spender, uint _value) public returns (bool success) {
		return token.approve(_spender, _value);
	}
	
	function allowance(address _owner, address _spender) public view returns (uint remaining) {
		return token.allowance(_owner, _spender);
	}
}