pragma solidity ^0.5.0;

/**
 * @dev Attributes library interface to handle address flags management and access.
 */
interface IAttributesLib
{
	struct AttributesStorage {
		mapping (address => bool) admins; //admins addresses
		mapping (address => bool) noFeeAddress; //no fee addresses
		
		bool transfersEnabled; //transfers enabled/disabled
		
		bool kycEnabled; //know your costumer enabled/disabled
		mapping (address => bool) kycApproved; //know your costumer approved addresses
		mapping (address => bool) blacklisted; //blacklisted addresses, disabled from performing any transfers or operations
		
		//wallet address where the fees are collected
		address feesCollectorWallet;
		
		//if enabled, transfer to your same address is considered funds withdrawal
		bool transferToYourselfIsWidrawal;
	
		address owner; // owner of contract/library scope
	}
	
	
	
    /**
	 * @dev Event is raised when admin enables transfers.
	 * @param _admin Admin address performing the operation.
	 */
	event TransfersEnabled(address indexed _admin);
	
	/**
	 * @dev Event is raised when admin disables transfers.
	 * @param _admin Admin address performing the operation.
	 */
	event TransfersDisabled(address indexed _admin);
	
	
	
	function init(AttributesStorage storage self, bool _kycEnabled) public;
	
	/**
	 * @dev Change transfer fees collector wallet, only owner can do it
	 * @param newWallet Set address to collect fees into
	 * @return bool
	 */
	function setFeesCollectorWallet(AttributesStorage storage self, address newWallet) public returns (bool);
	
	/**
	 * @dev Set transfer to yourself is widrawal toggle enabled/disabled.
	 * @return bool
	 */
	function setTransferToYourselfIsWidrawal(AttributesStorage storage self, bool enabled) public returns (bool);
	
	
	
	///*** TransfersController contract functions
	
	/**
	 * @dev Enable transfers if they are disabled, executed only by admin.
	 * @return bool
	 */
	function enableTransfers(AttributesStorage storage self, bool enable) public returns (bool);
	
	///*** TransfersController contract functions
	
	
	
	function isOwner(AttributesStorage storage self, address account) public view returns (bool);
	
    function isAdmin(AttributesStorage storage self, address account) public view returns (bool);
	
    function addAdmin(AttributesStorage storage self, address account) public;
	
	function removeAdmin(AttributesStorage storage self, address account) public;
	
    function renounceAdmin(AttributesStorage storage self) public;
	
	
	
	function isNoFeeAddress(AttributesStorage storage self, address account) public view returns (bool);
	
    function addNoFeeAddress(AttributesStorage storage self, address account) public;
	
	function removeNoFeeAddress(AttributesStorage storage self, address account) public;
	
    function renounceNoFeeAddress(AttributesStorage storage self) public;
	
	
	
	/**
	 * @dev Event emitted when a user address was KYC approved.
	 * @param _admin Admin address performing the operation
	 * @param _userAddress User address that was KYC approved
	 */
    event KYCAddressApproved(address indexed _admin, address indexed _userAddress);
	
	/**
	 * @dev Event emitted when a user address was KYC disapproved.
	 * @param _admin Admin address performing the operation
	 * @param _userAddress User address that was KYC disapproved
	 */
    event KYCAddressDisapproved(address indexed _admin, address indexed _userAddress);
	
	/**
	 * @dev Check if user address is KYC approved.
	 * @param _account User address
	 * @return bool
	 */
	function isKYCApproved(AttributesStorage storage self, address _account) public view returns (bool);
	
	/**
	 * @dev Approve KYC user address, only admin can do it.
	 * @param _account User address
	 */
	function approveKYCUserAddress(AttributesStorage storage self, address _account) public;
	
	/**
	 * @dev Disapprove KYC user address, only admin can do it.
	 * @param _account User address
	 */
	function disapproveKYCUserAddress(AttributesStorage storage self, address _account) public;
	
	///**
	// * @dev Approve KYC user address
	// * @param _account User address
	// */
    /*function _approveKYCUserAddress(address _account) public {
		require(!_users.has(_account), "KYC: User address already approved");
        _users.add(_account);
        emit KYCAddressApproved(msg.sender, _account);
    }*/
	
	///**
	// * @dev Disapprove KYC user address
	// * @param _account User address
	// */
    /*function _disapproveKYCUserAddress(address _account) public {
		require(_users.has(_account), "KYC: User address already disapproved");
        _users.remove(_account);
        emit KYCAddressDisapproved(msg.sender, _account);
    }*/
	
	
	
	function isKYCDisabledOrApprovedAddress(AttributesStorage storage self, address _address) public view returns (bool);
	
	/**
	 * @dev Enable/Disable KYC required.
	 * @param enable True to enable, false to disable.
	 * @return bool.
	 */
	function enableKYC(AttributesStorage storage self, bool enable) public returns (bool success);
	
	/**
	 * @dev Event emitted when a user address was blacklisted due to suspicious operations.
	 * @param _admin Admin address performing the operation
	 * @param _userAddress User address that was blacklisted
	 */
    event BlacklistedAddress(address indexed _admin, address indexed _userAddress);
	
	/**
	 * @dev Event emitted when a user address was allowed to continue normal operations after being blacklisted due to suspicious operations.
	 * @param _admin Admin address performing the operation
	 * @param _userAddress User address that was allowed back to normal
	 */
    event AllowedBlacklistedAddress(address indexed _admin, address indexed _userAddress);
	
	
	
	
	function isNOTBlacklistedAddress(AttributesStorage storage self, address _address) public view returns (bool success);
	
	/**
	 * @dev Check if user address is blacklisted.
	 * @param _account User address
	 * @return bool
	 */
	function isBlacklisted(AttributesStorage storage self, address _account) public view returns (bool);
	
	/**
	 * @dev Blacklist user address, only admin can do it.
	 * @param _account User address
	 */
	function blacklistUserAddress(AttributesStorage storage self, address _account) public;
	
	/**
	 * @dev Allow user address back to normal, only admin can do it.
	 * @param _account User address
	 */
	function allowBlacklistedUserAddress(AttributesStorage storage self, address _account) public;
	
	///**
	// * @dev Blacklist user address
	// * @param _account User address
	// */
    //function _blacklistUserAddress(AttributesStorage storage self, address _account) public;
	
	///**
	// * @dev Allow blacklisted user address back to normal operations
	// * @param _account User address
	// */
    //function _allowBlacklistedUserAddress(AttributesStorage storage self, address _account) public;
}