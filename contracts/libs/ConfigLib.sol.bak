pragma solidity ^0.4.24;

//import "./SafeMathLib.sol";
//import "./interfaces/IERC20.sol";
//import "./interfaces/IBlockchainBridge.sol";
//import "./interfaces/ITokensRecovery.sol";
//import "./interfaces/IEtherReclaimer.sol";
//import "./Owned.sol";
//import "./Mortal.sol";
//import "./lifecycle/Pausable.sol";
//import "../access/roles/Admin.sol";
//import "../access/roles/NoFeeAddress.sol";
//import "./BlockchainBridge.sol";
//import "./TransfersController.sol";
//import "../fees/FeesController.sol";
//import "./StandardTokenStorage.sol";
//import "../kyc/KYCController.sol";
//import "../kyc/BlacklistController.sol";




/**
 * @dev System Config library to handle system management.
 */
library ConfigLib
{
    struct ConfigStorage {
		mapping (address => bool) admins; //admins addresses
		mapping (address => bool) noFeeAddress; //no fee addresses
		
		bool transfersEnabled; // transfers enabled/disabled
		
		bool kycEnabled; // know your costumer enabled/disabled
		mapping (address => bool) kycApproved; // know your costumer approved addresses
		mapping (address => bool) blacklisted; // blacklisted addresses, disabled from performing any transfers or operations
		
		// wallet address where the fees are collected
		address feesCollectorWallet;
		
		// if enabled, transfer to your same address is considered funds withdrawal
		bool transferToYourselfIsWidrawal;
		
		// toggle to control deposits
		bool depositsEnabled;
		
		// toggle to control withdrawals
		bool withdrawalsEnabled;
		
		// minimum withdrawal amount
		uint minWithdrawalAmount;
		
		// maximum withdrawal amount, 0 means disabled
		uint maxWithdrawalAmount;
		
		bool paused; // contract emergency stop
	}
	
	
	
	/**
	 * @dev Event is raised when admin enables transfers.
	 * @param _admin Admin address performing the operation.
	 */
	event TransfersEnabled(address indexed _admin);
	
	/**
	 * @dev Event is raised when admin disables transfers.
	 * @param _admin Admin address performing the operation.
	 */
	event TransfersDisabled(address indexed _admin);
	
	/**
	 * @dev Event is raised when admin pauses contract operations.
	 * @param _admin Admin address performing the operation.
	 */
	event Paused(address indexed _admin);
	
	/**
	 * @dev Event is raised when admin resumes contract operations.
	 * @param _admin Admin address performing the operation.
	 */
	event Unpaused(address indexed _admin);
	
	event MinWithdrawalAmountChanged(address indexed _admin, uint _minWithdrawalAmount, uint _newMinWithdrawalAmount);
	event MaxWithdrawalAmountChanged(address indexed _admin, uint _maxWithdrawalAmount, uint _newMaxWithdrawalAmount);
	
	/**
	 * @dev Event is raised when admin enables deposits.
	 * @param _admin Admin address executing the function.
	 */
	event DepositsEnabled(address indexed _admin);
	
	/**
	 * @dev Event is raised when admin disables deposits.
	 * @param _admin Admin address executing the function.
	 */
	event DepositsDisabled(address indexed _admin);
	
	/**
	 * @dev Event is raised when admin enables withdrawals.
	 * @param _admin Admin address executing the function.
	 */
	event WithdrawalsEnabled(address indexed _admin);
	
	/**
	 * @dev Event is raised when admin disables withdrawals.
	 * @param _admin Admin address executing the function.
	 */
	event WithdrawalsDisabled(address indexed _admin);
	
	event AdminAdded(address indexed admin, address indexed account);
    event AdminRemoved(address indexed admin, address indexed account);
	event AdminRenounced(address indexed account);
	
	event NoFeeAddressAdded(address indexed admin, address indexed account);
    event NoFeeAddressRemoved(address indexed admin, address indexed account);
	event NoFeeAddressRenounced(address indexed account);
	
	/**
	 * @dev Event is raised when admin enables KYC filters.
	 * @param _admin Admin address performing the operation.
	 */
	event KYCEnabled(address indexed _admin);
	
	/**
	 * @dev Event is raised when admin disables KYC filters.
	 * @param _admin Admin address performing the operation.
	 */
	event KYCDisabled(address indexed _admin);
	
	/**
	 * @dev Event emitted when a user address was KYC approved.
	 * @param _admin Admin address performing the operation
	 * @param _userAddress User address that was KYC approved
	 */
    event KYCAddressApproved(address indexed _admin, address indexed _userAddress);
	
	/**
	 * @dev Event emitted when a user address was KYC disapproved.
	 * @param _admin Admin address performing the operation
	 * @param _userAddress User address that was KYC disapproved
	 */
    event KYCAddressDisapproved(address indexed _admin, address indexed _userAddress);
	
	/**
	 * @dev Event emitted when a user address was blacklisted due to suspicious operations.
	 * @param _admin Admin address performing the operation
	 * @param _userAddress User address that was blacklisted
	 */
    event BlacklistedAddress(address indexed _admin, address indexed _userAddress);
	
	/**
	 * @dev Event emitted when a user address was allowed to continue normal operations after being blacklisted due to suspicious operations.
	 * @param _admin Admin address performing the operation
	 * @param _userAddress User address that was allowed back to normal
	 */
    event AllowedBlacklistedAddress(address indexed _admin, address indexed _userAddress);
	
	
	
	
	function init(ConfigStorage storage self, bool _kycEnabled) internal {
		self.admins[msg.sender] = true;
		self.noFeeAddress[msg.sender] = true;
		
		self.transfersEnabled = true;
		
		self.kycEnabled = _kycEnabled;
		self.feesCollectorWallet = msg.sender;
		self.transferToYourselfIsWidrawal = true;
		
		self.depositsEnabled = true;
		self.withdrawalsEnabled = true;
		
		//50 usd or equivalent is default withdraw amount
		self.minWithdrawalAmount = 5000;
		self.maxWithdrawalAmount = 0; //disabled
		
		//self.owner = msg.sender;
		self.paused = false;
	}
	
	
	
	/**
	 * @dev Change transfer fees collector wallet, only owner can do it
	 * @param newWallet Set address to collect fees into
	 * @return bool
	 */
	function setFeesCollectorWallet(ConfigStorage storage self, address newWallet) internal returns (bool) {
		if (newWallet != self.feesCollectorWallet) {
			self.feesCollectorWallet = newWallet;
			return true;
		}
		return false;
	}
	
	/**
	 * @dev Set transfer to yourself is widrawal toggle enabled/disabled.
	 * @return bool
	 */
	function setTransferToYourselfIsWidrawal(ConfigStorage storage self, bool enabled) internal returns (bool) {
		if (enabled != self.transferToYourselfIsWidrawal) {
			self.transferToYourselfIsWidrawal = enabled;
			return true;
		}
		return false;
	}
	
	///*** TransfersController contract functions
	
	/**
	 * @dev Enable transfers if they are disabled, executed only by admin.
	 * @return bool
	 */
	function enableTransfers(ConfigStorage storage self, bool enable) internal /*whenNotPaused*/ returns (bool) {
		//require(isAdmin(self, msg.sender), "enableTransfers: Admin required");
		if (self.transfersEnabled != enable) {
			self.transfersEnabled = enable;
			if (enable)
				emit TransfersEnabled(msg.sender);
			else emit TransfersDisabled(msg.sender);
		}
		return false;
	}
	
	///*** TransfersController contract functions
	
	
	
	/**
	 * @dev Enable deposits if they are disabled, executed only by admin.
	 * @return bool
	 */
	function enableDeposits(ConfigStorage storage self, bool enable) internal returns (bool) {
		if (self.depositsEnabled != enable) {
			self.depositsEnabled = enable;
			if (enable)
				emit DepositsEnabled(msg.sender);
			else emit DepositsDisabled(msg.sender);
			return true;
		}
		return false;
	}
	
	/**
	 * @dev Enable withdrawals if they are disabled, executed only by admin.
	 * @return bool
	 */
	function enableWithdrawals(ConfigStorage storage self, bool enable) internal returns (bool) {
		if (self.withdrawalsEnabled != enable) {
			self.withdrawalsEnabled = enable;
			if (enable)
				emit WithdrawalsEnabled(msg.sender);
			else emit WithdrawalsDisabled(msg.sender);
			return true;
		}
		return false;
	}
	
	/**
	 * @dev Set/change minimum withdrawal amount, only admin can do it.
	 * @return bool
	 */
	function setMinWithdrawalAmount(ConfigStorage storage self, uint _minAmount) internal returns (bool) {
		//require(isAdmin(self, msg.sender), "setMinWithdrawalAmount: Admin required");
		if (self.minWithdrawalAmount != _minAmount) { //, "Min withdrawal different value required!");
			emit MinWithdrawalAmountChanged(msg.sender, self.minWithdrawalAmount, _minAmount);
			self.minWithdrawalAmount = _minAmount;
			return true;
		}
		return false;
	}
	
	/**
	 * @dev Set/change maximum withdrawal amount, only admin can do it.
	 * @return bool
	 */
	function setMaxWithdrawalAmount(ConfigStorage storage self, uint _maxAmount) internal returns (bool) {
		//require(isAdmin(self, msg.sender), "setMaxWithdrawalAmount: Admin required");
		if (self.maxWithdrawalAmount != _maxAmount) { //, "Max withdrawal different value required!");
			emit MaxWithdrawalAmountChanged(msg.sender, self.maxWithdrawalAmount, _maxAmount);
			self.maxWithdrawalAmount = _maxAmount;
			return true;
		}
		return false;
	}
	
	
	
	/**
	 * @dev Pause/resume contract operations, executed only by admin.
	 * @return bool
	 */
	function pause(ConfigStorage storage self, bool _pause) internal returns (bool) {
		require(isAdmin(self, msg.sender), "pause: Admin required");
		if (self.paused != _pause) {
			self.paused = _pause;
			if (_pause)
				emit Paused(msg.sender);
			else emit Unpaused(msg.sender);
		}
		return false;
	}
	
	function isPaused(ConfigStorage storage self) internal view returns (bool) {
        return (self.paused == true);
    }
	
    function isAdmin(ConfigStorage storage self, address account) internal view returns (bool) {
        return (self.admins[account] == true);
    }

    function addAdmin(ConfigStorage storage self, address account) internal {
		require(isAdmin(self, msg.sender), "addAdmin: Admin required");
        self.admins[account] = true;
    }
	
	//---
	// custom function added
	function removeAdmin(ConfigStorage storage self, address account) internal {
		//require(isOwner(self, msg.sender), "removeAdmin: Owner required");
		//require(account != self.owner, "Owner can not remove his admin role");
        self.admins[account] = false;
        emit AdminRemoved(msg.sender, account);
    }
	//---
	
    function renounceAdmin(ConfigStorage storage self) internal {
		//require(!isOwner(self, msg.sender), "Owner can not renounce to his admin role");
        self.admins[msg.sender] = false;
		emit AdminRenounced(msg.sender);
    }
	
	
	
	function isNoFeeAddress(ConfigStorage storage self, address account) internal view returns (bool) {
        return (self.noFeeAddress[account] == true);
    }

    function addNoFeeAddress(ConfigStorage storage self, address account) internal {
		//require(isOwner(self, msg.sender), "addNoFeeAddress: Owner required");
        self.noFeeAddress[account] = true;
    }
	
	function removeNoFeeAddress(ConfigStorage storage self, address account) internal {
		//require(isOwner(self, msg.sender), "removeNoFeeAddress: Owner required");
		self.noFeeAddress[account] = false;
		emit NoFeeAddressRemoved(msg.sender, account);
    }
	
    function renounceNoFeeAddress(ConfigStorage storage self) internal {
		self.noFeeAddress[msg.sender] = false;
		emit NoFeeAddressRenounced(msg.sender);
    }
	/*
	function _addNoFeeAddress(address account) internal {
        _noFeeAddresses.add(account);
		emit NoFeeAddressAdded(msg.sender, account);
    }*/
	
	
	
	/**
	 * @dev Check if user address is KYC approved.
	 * @param _account User address
	 * @return bool
	 */
	function isKYCApproved(ConfigStorage storage self, address _account) internal view returns (bool) {
        return (self.kycApproved[_account] == true);
    }
	
	/**
	 * @dev Approve KYC user address, only admin can do it.
	 * @param _account User address
	 */
	function approveKYCUserAddress(ConfigStorage storage self, address _account) internal {
		require(isAdmin(self, msg.sender), "approveKYCUserAddress: Admin required");
        self.kycApproved[_account] = true;
    }
	
	/**
	 * @dev Disapprove KYC user address, only admin can do it.
	 * @param _account User address
	 */
	function disapproveKYCUserAddress(ConfigStorage storage self, address _account) internal {
		require(isAdmin(self, msg.sender), "disapproveKYCUserAddress: Admin required");
		//require(!isOwner(self, _account), "disapproveKYCUserAddress: Owner can not remove his KYC approved status");
        self.kycApproved[_account] = false;
    }
	
	///**
	// * @dev Approve KYC user address
	// * @param _account User address
	// */
    /*function _approveKYCUserAddress(address _account) internal {
		require(!_users.has(_account), "KYC: User address already approved");
        _users.add(_account);
        emit KYCAddressApproved(msg.sender, _account);
    }*/
	
	///**
	// * @dev Disapprove KYC user address
	// * @param _account User address
	// */
    /*function _disapproveKYCUserAddress(address _account) internal {
		require(_users.has(_account), "KYC: User address already disapproved");
        _users.remove(_account);
        emit KYCAddressDisapproved(msg.sender, _account);
    }*/
	
	
	
	function isKYCDisabledOrApprovedAddress(ConfigStorage storage self, address _address) internal view returns (bool) {
		// if KYC is enabled, sender address must be approved
		return (!self.kycEnabled || isKYCApproved(self, _address));
	}
	
	/**
	 * @dev Enable/Disable KYC required.
	 * @param enable True to enable, false to disable.
	 * @return bool.
	 */
	function enableKYC(ConfigStorage storage self, bool enable) internal returns (bool success) {
		require(isAdmin(self, msg.sender), "enableKYC: Admin required");
		if (self.kycEnabled != enable) {
			self.kycEnabled = enable;
			if (enable)
				emit KYCEnabled(msg.sender);
			else emit KYCDisabled(msg.sender);
			return true;
		}
		return false;
	}
	
	
	
	function isNotBlacklisted(ConfigStorage storage self, address _address) internal view returns (bool success) {
		// only allowed to continue if 'to' address is not blacklisted
		return (!isBlacklisted(self, _address));
	}
	
	
	
	/**
	 * @dev Check if user address is blacklisted.
	 * @param _account User address
	 * @return bool
	 */
	function isBlacklisted(ConfigStorage storage self, address _account) internal view returns (bool) {
        return (self.blacklisted[_account] == true);
    }
	
	/**
	 * @dev Blacklist user address, only admin can do it.
	 * @param _account User address
	 */
	function blacklistUserAddress(ConfigStorage storage self, address _account) internal {
		require(isAdmin(self, msg.sender), "blacklistUserAddress: Admin required");
		//require(!isOwner(self, _account), "Owner can not be blacklisted");
		_blacklistUserAddress(self, _account);
    }
	
	/**
	 * @dev Allow user address back to normal, only admin can do it.
	 * @param _account User address
	 */
	function allowBlacklistedUserAddress(ConfigStorage storage self, address _account) internal {
		//require(isAdmin(self, msg.sender), "allowBlacklistedUserAddress: Admin required");
		_allowBlacklistedUserAddress(self, _account);
    }
	
	/**
	 * @dev Blacklist user address
	 * @param _account User address
	 */
    function _blacklistUserAddress(ConfigStorage storage self, address _account) internal {
		require(!isBlacklisted(self, _account), "Address already blacklisted");
        self.blacklisted[_account] = true;
        emit BlacklistedAddress(msg.sender, _account);
    }
	
	/**
	 * @dev Allow blacklisted user address back to normal operations
	 * @param _account User address
	 */
    function _allowBlacklistedUserAddress(ConfigStorage storage self, address _account) internal {
		require(isBlacklisted(self, _account), "Address already allowed");
        self.blacklisted[_account] = false;
        emit AllowedBlacklistedAddress(msg.sender, _account);
    }
}