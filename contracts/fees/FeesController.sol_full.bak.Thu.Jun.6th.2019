pragma solidity ^0.5.0;

import "../access/roles/PauserRole.sol";
import "./FeesLib.sol";

// ----------------------------------------------------------------------------
// Transfers fees controller
// ----------------------------------------------------------------------------
contract FeesController is PauserRole {
	
    using FeesLib for FeesLib.Fee;
	
	// symbol like "USD" or "GBP" or any other asset or currency
	string public symbol;
	
    FeesLib.Fee private _transferFee;
	FeesLib.Fee private _withdrawalFee;
	FeesLib.Fee private _depositFee;
	
	
	
	event TransferFeesEnabled(address indexed admin, string symbol);
	event TransferFeesDisabled(address indexed admin, string symbol);
	event TransferFeesChanged(address indexed admin, string symbol, uint parts_Fee, uint perX_Fee);
	event MinimumTransferFeeTokensChanged(address indexed admin, string symbol, uint newTransferFeeTokens);
	event TransferFeesCollected(address indexed from, address indexed to, uint transferTokens, uint transferTokensFee, string symbol);
	
	event WithdrawalFeesEnabled(address indexed admin, string symbol);
	event WithdrawalFeesDisabled(address indexed admin, string symbol);
	event WithdrawalFeesChanged(address indexed admin, string symbol, uint parts_Fee, uint perX_Fee);
	event MinimumWithdrawalFeeTokensChanged(address indexed admin, string symbol, uint newWithdrawalFeeTokens);
	event WithdrawalFeesCollected(address indexed from, uint withdrawalTokens, uint withdrawalTokensFee, string symbol);
	
	event DepositFeesEnabled(address indexed admin, string symbol);
	event DepositFeesDisabled(address indexed admin, string symbol);
	event DepositFeesChanged(address indexed admin, string symbol, uint parts_Fee, uint perX_Fee);
	event MinimumDepositFeeTokensChanged(address indexed admin, string symbol, uint newDepositFeeTokens);
	event DepositFeesCollected(address indexed from, uint depositTokens, uint depositTokensFee, string symbol);
	
	
	
    constructor (string _symbol) PauserRole() internal {
		
		symbol = _symbol;
    }
	
	
	
	/**
	 * @dev calculateTransferFeeTokens, given token amount, calculate transfer fee in units/tokens that are cents or pennies
	 * @return uint
	 */
	function calculateTransferFeeTokens(uint tokens) public view returns (uint transferFeeTokens) {
		
		return _transferFee._calculateFeeTokens(tokens);
	}
	
	/**
	 * @dev calculateWithdrawalFeeTokens, given token amount, calculate withdrawal fee in units/tokens that are cents or pennies
	 * @return uint
	 */
	function calculateWithdrawalFeeTokens(uint tokens) public view returns (uint withdrawalFeeTokens) {
		
		return _withdrawalFee._calculateFeeTokens(tokens);
	}
	
	/**
	 * @dev calculateDepositFeeTokens, given token amount, calculate deposit fee in units/tokens that are cents or pennies
	 * @return uint
	 */
	function calculateDepositFeeTokens(uint tokens) public view returns (uint depositFeeTokens) {
		
		return _depositFee._calculateFeeTokens(tokens);
	}
	
	
	
	/**
	 * @dev Get minimum transfer fee tokens/pennies/cents
	 * @return uint
	 */
	function getMinimumTransferFeeTokens() public view returns (uint minTransferFeeTokens) {
		
		return _transferFee._getMinimumFeeTokens();
	}
	
	/**
	 * @dev Get minimum withdrawal fee tokens/pennies/cents
	 * @return uint
	 */
	function getMinimumWithdrawalFeeTokens() public view returns (uint minWithdrawalFeeTokens) {
		
		return _withdrawalFee._getMinimumFeeTokens();
	}
	
	/**
	 * @dev Get minimum deposit fee tokens/pennies/cents
	 * @return uint
	 */
	function getMinimumDepositFeeTokens() public view returns (uint minDepositFeeTokens) {
		
		return _depositFee._getMinimumFeeTokens();
	}
	
	
	
	/**
	 * @dev Set/change minimum transfer fee tokens/pennies/cents, only admin can do it
	 * @return bool
	 */
	function setMinimumTransferFeeTokens(uint newMinTransferFeeTokens) public onlyPauser returns (bool success) {
		bool setOk = _transferFee._setMinimumFeeTokens(newMinTransferFeeTokens);
		if (ok) {
			emit MinimumTransferFeeTokensChanged(msg.sender, symbol, newMinTransferFeeTokens);
		}
		return setOk;
	}
	
	/**
	 * @dev Set/change minimum withdrawal fee tokens/pennies/cents, only admin can do it
	 * @return bool
	 */
	function setMinimumWithdrawalFeeTokens(uint newMinWithdrawalFeeTokens) public onlyPauser returns (bool success) {
		bool setOk = _withdrawalFee._setMinimumFeeTokens(newMinWithdrawalFeeTokens);
		if (ok) {
			emit MinimumWithdrawalFeeTokensChanged(msg.sender, symbol, newMinWithdrawalFeeTokens);
		}
		return setOk;
	}
	
	/**
	 * @dev Set/change minimum deposit fee tokens/pennies/cents, only admin can do it
	 * @return bool
	 */
	function setMinimumDepositFeeTokens(uint newMinDepositFeeTokens) public onlyPauser returns (bool success) {
		bool setOk = _depositFee._setMinimumFeeTokens(newMinDepositFeeTokens);
		if (ok) {
			emit MinimumDepositFeeTokensChanged(msg.sender, symbol, newMinDepositFeeTokens);
		}
		return setOk;
	}
	
	
	
	/**
	 * @dev Check transfer fees enabled/disabled fees
	 * @return bool
	 */
	function checkTransferFeesEnabled() public view returns (bool enabledFees) {
		
		return _transferFee._checkEnabledFees();
	}
	
	/**
	 * @dev Check withdrawal fees enabled/disabled fees
	 * @return bool
	 */
	function checkWithdrawalFeesEnabled() public view returns (bool enabledFees) {
		
		return _withdrawalFee._checkEnabledFees();
	}
	
	/**
	 * @dev Check deposit fees enabled/disabled fees
	 * @return bool
	 */
	function checkDepositFeesEnabled() public view returns (bool enabledFees) {
		
		return _depositFee._checkEnabledFees();
	}
	
	
	
	/**
	 * @dev Enable transfer fees, only admin can do it
	 * @return bool
	 */
	function enableTransferFees() public onlyPauser returns (bool success) {
		bool ok = _transferFee._enableFees();
		if (ok) {
			emit TransferFeesEnabled(msg.sender, symbol);
		}
		return ok;
	}
	
	/**
	 * @dev Enable withdrawal fees, only admin can do it
	 * @return bool
	 */
	function enableWithdrawalFees() public onlyPauser returns (bool success) {
		bool ok = _withdrawalFee._enableFees();
		if (ok) {
			emit WithdrawalFeesEnabled(msg.sender, symbol);
		}
		return ok;
	}
	
	/**
	 * @dev Enable deposit fees, only admin can do it
	 * @return bool
	 */
	function enableDepositFees() public onlyPauser returns (bool success) {
		bool ok = _depositFee._enableFees();
		if (ok) {
			emit DepositFeesEnabled(msg.sender, symbol);
		}
		return ok;
	}
	
	
	
	/**
	 * @dev Disable transfer fees, only admin can do it
	 * @return bool
	 */
	function disableTransferFees() public onlyPauser returns (bool success) {
		bool ok = _transferFee._disableFees();
		if (ok) {
			emit TransferFeesDisabled(msg.sender, symbol);
		}
		return ok;
	}
	
	/**
	 * @dev Disable withdrawal fees, only admin can do it
	 * @return bool
	 */
	function disableWithdrawalFees() public onlyPauser returns (bool success) {
		bool ok = _withdrawalFee._disableFees();
		if (ok) {
			emit WithdrawalFeesDisabled(msg.sender, symbol);
		}
		return ok;
	}
	
	/**
	 * @dev Disable deposit fees, only admin can do it
	 * @return bool
	 */
	function disableDepositFees() public onlyPauser returns (bool success) {
		bool ok = _depositFee._disableFees();
		if (ok) {
			emit DepositFeesDisabled(msg.sender, symbol);
		}
		return ok;
	}
	
	
	
	/**
	 * @dev Get transfer fees as parts per X units
	 * @return bool
	 */
	function getTransferFees() public view returns (uint _parts_Fee, uint _perX_Fee) {
		return _transferFee._getFees();
	}
	
	/**
	 * @dev Get withdrawal fees as parts per X units
	 * @return bool
	 */
	function getWithdrawalFees() public view returns (uint _parts_Fee, uint _perX_Fee) {
		return _withdrawalFee._getFees();
	}
	
	/**
	 * @dev Get deposit fees as parts per X units
	 * @return bool
	 */
	function getDepositFees() public view returns (uint _parts_Fee, uint _perX_Fee) {
		return _depositFee._getFees();
	}
	
	
	
	/**
	 * @dev Set transfer fees as parts per X units, only admin can do it
	 * @return bool
	 */
	function setTransferFees(uint _parts_Fee, uint _perX_Fee) public onlyPauser returns (bool success) {
		bool ok = _transferFee._setFees(_parts_Fee, _perX_Fee);
		if (ok) {
			emit TransferFeesChanged(msg.sender, symbol, _parts_Fee, _perX_Fee);
		}
		return ok;
	}
	
	/**
	 * @dev Set withdrawal fees as parts per X units, only admin can do it
	 * @return bool
	 */
	function setWithdrawalFees(uint _parts_Fee, uint _perX_Fee) public onlyPauser returns (bool success) {
		bool ok = _withdrawalFee._setFees(_parts_Fee, _perX_Fee);
		if (ok) {
			emit WithdrawalFeesChanged(msg.sender, symbol, _parts_Fee, _perX_Fee);
		}
		return ok;
	}
	
	/**
	 * @dev Set deposit fees as parts per X units, only admin can do it
	 * @return bool
	 */
	function setDepositFees(uint _parts_Fee, uint _perX_Fee) public onlyPauser returns (bool success) {
		bool ok = _depositFee._setFees(_parts_Fee, _perX_Fee);
		if (ok) {
			emit DepositFeesChanged(msg.sender, symbol, _parts_Fee, _perX_Fee);
		}
		return ok;
	}
}